#!/usr/bin/env python

db_file_meat = '../db/meat.md'
db_file_fish = '../db/fish.md'

# Google calendar specific functions
from gcalcli import *
gcal = gcalcli(client_id='996124500222-lrv2poibi8ll15cg25s1bs8eu7atjfk2.apps.googleusercontent.com',
               client_secret='zmQliJX0STI81we6csuy5wzb',
               refreshCache=True)

def setCal(cal_name):
    matches = []
    for cal in gcal.allCals:
        if cal_name == cal['summary']:
            gcal.cals = [cal]
            return
    print ("ERROR! there is no such calendar as '" + cal_name + "'!")
    print ("Available:")
    gcal.ListAllCalendars()
    exit(1)

def removeByDescription(desc, start=None, end=None):
    ev_list = gcal._SearchForCalEvents(start, end, None)
    gcal.iamaExpert = True
    for ev in ev_list: 
        if desc in ev['description']:
            #print ev['summary']
            #gcal.iamaExpert = False
            gcal._DeleteEvent(ev)

# Food db related functions
class Food:
    def __init__(self):
        self.name = "(unknown food)"
        self.description = ""
        self.calories = 0.0
        self.price = 0.0
        self.avaluable_courses = []
        self.timesaweek = -1

class OneDayShedule:
    def __init__(self):
        self.food = []
        self.snack = []
    
    def setTIME(self, eTimeStart):
        '''
        should be called after all setFood insts have been called
        call like ods.setTIME(datetime(2002, 12, 4, 8, 0))
        '''
        eDistance = 180
        eDuration = 30
        self.sTimes = [(eTimeStart + timedelta(minutes=float(i*eDistance))).isoformat()
                                                       for i in xrange(len(self.food))]
        self.eTimes = [(eTimeStart + timedelta(minutes=float(i*eDistance+eDuration))).isoformat()
                                                       for i in xrange(len(self.food))]                                                       
        
    def setFoodI(self, i, food_tuple):
        '''
        i is a number from 1 to ... - the number of food
        food_tuple - set of foods to take
        '''
        if (i < 1): 
            raise ValueError("'i' can be in range 1..inf! (i="+str(i)+")") 
        while len(self.food) < i:
            self.food.append([Food()]) # Extending with dummy placeholders
        self.food[i - 1] = food_tuple

class Shedule:
    def __init__(self):
        self.food_meat = []
        self.food_fish = []

    def addOneDayShedule(self, ods, date):
         





def getListOfFood(file_name):
    f_lines = []
    with open(file_name, 'r') as f:
        f_lines = f.readlines()
    


def main():
    #setCal('red');
    #n, m = ParseReminder('30m popup')
    #eStart, eEnd = GetTimeFromStr('3/28/2015 10:00', 60)
    #gcal.ListAllCalendars()
    #gcal.AddEvent("My test event", "NONE", eStart, eEnd, "_autogenerated_", [str(n) + ' ' + m])  
    #removeByDescription("_autogenerated_")
    #print datetime.now(tzlocal())
    #print eStart

    ods = OneDayShedule()
    ods.setTIME(datetime(2002, 12, 4, 8, 0))
    print ods.times


if __name__ == '__main__':
    main()
